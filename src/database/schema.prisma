datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../@generated"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

enum Permission {
  ADMIN
  USER
  GUEST
}

model User {
  id          String       @id @default(cuid())
  image       String?
  name        String
  username    String
  password    String
  permissions Permission[] @default([GUEST])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  createdById String?
  updatedById String?

  isDeactivated Boolean @default(false)
  isDeleted     Boolean @default(false)

  shipCreators Ship[]     @relation("shipCreators")
  shipUpdaters Ship[]     @relation("shipUpdaters")
  auditLogs    AuditLog[]

  @@map("users")
}

enum Action {
  CREATE
  UPDATE
  SOFT_DELETE
  HARD_DELETE
  RESTORE
  LOGIN
}

model AuditLog {
  id           String  @id @default(cuid())
  userId       String
  action       Action
  table        String?
  description  String
  values       String?
  valuesBefore String?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Ship {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String?
  updatedById String?

  isDeleted Boolean @default(false)

  createdBy User? @relation("shipCreators", fields: [createdById], references: [id])
  updatedBy User? @relation("shipUpdaters", fields: [updatedById], references: [id])

  @@map("ships")
}
